
# import streamlit as st
# from PIL import Image
# import cairosvg
# import os
# from io import BytesIO
# from concurrent.futures import ThreadPoolExecutor
# from pptx import Presentation
# from pptx.util import Inches
# import io
# import uuid

# # Function to convert image to PNG
# def convert_image_to_png(uploaded_file):
#     ext = os.path.splitext(uploaded_file.name)[1].lower()
#     print(f"Uploading file: {uploaded_file.name}, File extension: {ext}")

#     # Create a unique temporary file path for output
#     unique_id = str(uuid.uuid4())  # Unique identifier to avoid conflicts
#     temp_input_path = f"/tmp/uploaded_image_{unique_id}.jpg"
#     output_path = f"/tmp/converted_{unique_id}.png"

#     try:
#         # Save the uploaded file to disk
#         with open(temp_input_path, "wb") as f:
#             f.write(uploaded_file.getbuffer())

#         # Check if file is empty
#         if os.path.getsize(temp_input_path) == 0:
#             raise ValueError(f"Uploaded file {uploaded_file.name} is empty.")

#         # Verify and process image based on type
#         try:
#             if ext in ['.jpg', '.jpeg', '.tiff', '.png']:  # Raster formats
#                 with Image.open(temp_input_path) as img:
#                     img.verify()  # Verify image to check if it's valid
#                     img = Image.open(temp_input_path)  # Reopen after verify
#                     img.save(output_path, format="PNG")  # Save as PNG
#             elif ext == '.svg':  # SVG format needs conversion
#                 cairosvg.svg2png(url=temp_input_path, write_to=output_path)
#             else:
#                 raise ValueError(f"Unsupported file format: {ext}")
#         except Exception as e:
#             raise ValueError(f"Error processing image: {e}")

#         # Clean up the temporary input file (no longer needed after conversion)
#         os.remove(temp_input_path)
        
#         return output_path  # Return the path to the converted PNG file

#     except Exception as e:
#         raise ValueError(f"Error processing image: {e}")


# # Function to process multiple files concurrently
# def process_files_concurrently(files):
#     # Process files in parallel and return converted paths
#     with ThreadPoolExecutor() as executor:
#         results = list(executor.map(convert_image_to_png, files))
#     return results



# def create_ppt_from_images(converted_paths, titles, margin=Inches(1/8)):
#     prs = Presentation()
#     for idx, converted_path in enumerate(converted_paths):
#         if not os.path.exists(converted_path):
#             raise FileNotFoundError(f"Converted image {converted_path} not found.")
#         with Image.open(converted_path) as image:
#             img_width, img_height = image.size
#         slide_layout = prs.slide_layouts[5]
#         slide = prs.slides.add_slide(slide_layout)
#         if titles[idx]:
#             title = titles[idx]
#             title_shape = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(1), Inches(1))
#             title_text_frame = title_shape.text_frame
#             title_text_frame.text = title
#             for paragraph in title_text_frame.paragraphs:
#                 for run in paragraph.runs:
#                     run.font.size = Inches(0.5)
#         slide_width = prs.slide_width
#         slide_height = prs.slide_height
#         available_width = slide_width - 2 * margin
#         available_height = slide_height - margin - Inches(1.0)
#         aspect_ratio = img_width / img_height
#         new_width = available_width
#         new_height = new_width / aspect_ratio
#         if new_height > available_height:
#             new_height = available_height
#             new_width = new_height * aspect_ratio
#         left = (slide_width - new_width) / 2
#         top = Inches(1.3)
#         if top + new_height > slide_height - margin:
#             new_height = slide_height - margin - top
#         with io.BytesIO() as image_stream:
#             image = Image.open(converted_path)
#             image.save(image_stream, format='PNG')
#             image_stream.seek(0)
#             slide.shapes.add_picture(image_stream, left, top, width=new_width, height=new_height)
#         os.remove(converted_path)
#     return prs




# # Streamlit UI
# st.title("Image to PowerPoint Converter")

# # File uploader for multiple files
# uploaded_files = st.file_uploader("Choose images...", type=["jpg", "jpeg", "tiff", "svg", "png"], accept_multiple_files=True)

# if uploaded_files:
#     # Process files and get converted paths
#     converted_paths = process_files_concurrently(uploaded_files)
#     st.session_state['converted_paths'] = converted_paths  # Store converted paths in session state

#     titles = []
#     col1, col2 = st.columns([2, 1])

#     for idx, converted_path in enumerate(converted_paths):
#         with col1:
#             title = st.text_input(f"Enter slide title for image {idx + 1}", key=f"title_{idx}")
#             titles.append(title)
#         with col2:
#             img = Image.open(converted_path)
#             st.image(img, caption=f"Uploaded Image {idx + 1}", width=200)

#     st.session_state['titles'] = titles  # Store titles in session state

#     set_margin = st.slider(
#         label="Set image margin (inches)", 
#         min_value=0.125,  # 1/8 inch
#         max_value=3.0,    # 3 inches
#         value=0.5,        # Default: 3/8 inch
#         step=0.125,       # Step: 1/8 inch
#         format="%.3f"     # Format the slider to display in inches
#     )

#     margin_in_inches = Inches(set_margin)


#     # PowerPoint generation logic
#     if st.button("Generate PowerPoint"):
#         if not converted_paths:
#             st.error("Please upload images and provide titles.")
#         else:
#             # Set margin for images in PowerPoint


#             # Create PowerPoint presentation
#             prs = create_ppt_from_images(converted_paths, titles, margin=margin_in_inches)

#             # Save PowerPoint to BytesIO
#             pptx_file = io.BytesIO()
#             prs.save(pptx_file)
#             pptx_file.seek(0)

#             # Button to download PowerPoint file
#             st.download_button(
#                 label="Download PowerPoint",
#                 data=pptx_file,
#                 file_name="images_presentation.pptx",
#                 mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
#             )
























#UNify this script into one. The goal is to be able to upload different types of images, convert to png, choose a number of slides, array the images on slides, and each slide should have it's own title, which is entered on the UI side using st.text_input

# import streamlit as st
# from PIL import Image
# import cairosvg
# import os
# from io import BytesIO
# from concurrent.futures import ThreadPoolExecutor
# from pptx import Presentation
# from pptx.util import Inches
# import io
# import uuid

# # Function to convert image to PNG
# def convert_image_to_png(uploaded_file):
#     ext = os.path.splitext(uploaded_file.name)[1].lower()
#     print(f"Uploading file: {uploaded_file.name}, File extension: {ext}")

#     # Create a unique temporary file path for output
#     unique_id = str(uuid.uuid4())  # Unique identifier to avoid conflicts
#     temp_input_path = f"/tmp/uploaded_image_{unique_id}.jpg"
#     output_path = f"/tmp/converted_{unique_id}.png"

#     try:
#         # Save the uploaded file to disk
#         with open(temp_input_path, "wb") as f:
#             f.write(uploaded_file.getbuffer())

#         # Check if file is empty
#         if os.path.getsize(temp_input_path) == 0:
#             raise ValueError(f"Uploaded file {uploaded_file.name} is empty.")

#         # Verify and process image based on type
#         try:
#             if ext in ['.jpg', '.jpeg', '.tiff', '.png']:  # Raster formats
#                 with Image.open(temp_input_path) as img:
#                     img.verify()  # Verify image to check if it's valid
#                     img = Image.open(temp_input_path)  # Reopen after verify
#                     img.save(output_path, format="PNG")  # Save as PNG
#             elif ext == '.svg':  # SVG format needs conversion
#                 cairosvg.svg2png(url=temp_input_path, write_to=output_path)
#             else:
#                 raise ValueError(f"Unsupported file format: {ext}")
#         except Exception as e:
#             raise ValueError(f"Error processing image: {e}")

#         # Clean up the temporary input file (no longer needed after conversion)
#         os.remove(temp_input_path)
        
#         return output_path  # Return the path to the converted PNG file

#     except Exception as e:
#         raise ValueError(f"Error processing image: {e}")


# # Function to process multiple files concurrently
# def process_files_concurrently(files):
#     # Process files in parallel and return converted paths
#     with ThreadPoolExecutor() as executor:
#         results = list(executor.map(convert_image_to_png, files))
#     return results


# # Function to create PowerPoint slide with selected images and title text
# def create_ppt_from_selected_images(uploaded_files, num_slides, images_per_slide, titles):
#     prs = Presentation()

#     # Slide margin in inches (1/4 inch margin)
#     slide_margin = Inches(0.25)

#     # Title space at the top of the slide (1/2 inch)
#     title_space = Inches(0.5)

#     # Loop over the number of slides
#     for slide_idx in range(num_slides):
#         slide_layout = prs.slide_layouts[5]  # Blank layout
#         slide = prs.slides.add_slide(slide_layout)
        
#         # Get images for the current slide
#         selected_images = images_per_slide[slide_idx]
#         slide_title = titles[slide_idx]

#         # Slide dimensions (inches)
#         slide_width = prs.slide_width
#         slide_height = prs.slide_height

#         # Calculate the available space after accounting for margins and title space
#         available_width = slide_width - 2 * slide_margin
#         available_height = slide_height - title_space - 2 * slide_margin

#         # Calculate positions to place images on the slide
#         max_images_per_row = 2  # Two images per row
#         image_spacing = Inches(0.2)  # Space between images
#         images_in_current_slide = len(selected_images)

#         # Calculate the width and height of each image based on available space
#         if images_in_current_slide == 1:
#             image_width = available_width
#             image_height = available_height
#         else:
#             max_images_per_row = min(max_images_per_row, images_in_current_slide)
#             image_width = (available_width - (max_images_per_row - 1) * image_spacing) / max_images_per_row
#             num_rows = (images_in_current_slide + max_images_per_row - 1) // max_images_per_row
#             image_height = (available_height - (num_rows - 1) * image_spacing) / num_rows

#         # Add the title text at the top
#         title_shape = slide.shapes.title
#         title_shape.text = slide_title
#         title_shape.left = slide_margin
#         title_shape.top = slide_margin
#         title_shape.width = slide_width - 2 * slide_margin  # Full width minus margins
#         title_shape.height = title_space  # Fixed height for the title area

#         # Loop through the selected images for the current slide
#         x_offset = slide_margin
#         y_offset = slide_margin + title_space  # Start placing images below the title

#         for i, img_file in enumerate(selected_images):
#             image = Image.open(img_file)
#             img_width, img_height = image.size

#             # Scale image while preserving aspect ratio
#             aspect_ratio = img_width / img_height
#             new_width = image_width
#             new_height = image_width / aspect_ratio

#             # If the new height exceeds the available height, adjust the width and height
#             if new_height > image_height:
#                 new_height = image_height
#                 new_width = image_height * aspect_ratio

#             # Position the images in a grid-like fashion (2 images per row)
#             left = x_offset
#             top = y_offset

#             # Add the image to the slide
#             with io.BytesIO() as image_stream:
#                 image.save(image_stream, format="PNG")
#                 image_stream.seek(0)
#                 slide.shapes.add_picture(image_stream, left, top, width=new_width, height=new_height)

#             # Update x_offset for the next image (to arrange in two columns)
#             x_offset += new_width + image_spacing

#             # If we have placed two images, reset x_offset and move to the next row
#             if (i + 1) % max_images_per_row == 0:
#                 x_offset = slide_margin
#                 y_offset += new_height + image_spacing

#     return prs

# # Streamlit UI
# st.title("PNG to PowerPoint Converter")

# st.write(
#     "Upload your PNG files below, and I will convert them into PowerPoint slides. "
#     "For each slide, you can select up to 4 images to place on it."
# )

# # File uploader
# uploaded_files = st.file_uploader("Choose PNG files", type="png", accept_multiple_files=True)

# if uploaded_files:
#     # Show number of slides selector
#     num_slides = st.number_input("Select number of slides", min_value=1, max_value=len(uploaded_files), value=1)

#     # Prepare a list to hold selected images per slide and titles
#     images_per_slide = []
#     slide_titles = []

#     # Show multi-select options for each slide and title input
#     for slide_idx in range(num_slides):
#         st.subheader(f"Slide {slide_idx + 1}")
        
#         # Title input for each slide
#         slide_title = st.text_input(f"Enter title for Slide {slide_idx + 1}", value=f"Slide {slide_idx + 1}")
#         slide_titles.append(slide_title)
        
#         # Multi-select for images
#         selected_images = st.multiselect(
#             f"Select up to 4 images for Slide {slide_idx + 1}",
#             options=uploaded_files,
#             max_selections=4
#         )
#         images_per_slide.append(selected_images)

#     # Generate the PowerPoint file when user is ready
#     if st.button("Generate PowerPoint"):
#         if images_per_slide:
#             prs = create_ppt_from_selected_images(uploaded_files, num_slides, images_per_slide, slide_titles)
            
#             # Save the PowerPoint file to a BytesIO stream
#             pptx_file = io.BytesIO()
#             prs.save(pptx_file)
#             pptx_file.seek(0)

#             # Button to download the generated PowerPoint file
#             st.download_button(
#                 label="Download PowerPoint",
#                 data=pptx_file,
#                 file_name="images_presentation.pptx",
#                 mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
#             )























import streamlit as st
from PIL import Image
import cairosvg
import os
import uuid
from pptx import Presentation
from pptx.util import Inches
import io
from io import BytesIO
from concurrent.futures import ThreadPoolExecutor


# Function to convert uploaded images to PNG (supporting various formats)
def convert_image_to_png(uploaded_file):
    ext = os.path.splitext(uploaded_file.name)[1].lower()
    filename = os.path.splitext(uploaded_file.name)[0].lower()
    print(f"Uploading file: {uploaded_file.name}, File extension: {ext}")

    # Create a unique temporary file path for output
    unique_id = str(uuid.uuid4())  # Unique identifier to avoid conflicts
    temp_input_path = f"/tmp/uploaded_image_{unique_id}.jpg"
    output_path = f"{filename}_{unique_id}.png"   #/tmp/converted_{unique_id}_{filename}.png

    try:
        # Save the uploaded file to disk
        with open(temp_input_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Check if file is empty
        if os.path.getsize(temp_input_path) == 0:
            raise ValueError(f"Uploaded file {uploaded_file.name} is empty.")

        # Verify and process image based on type
        try:
            if ext in ['.jpg', '.jpeg', '.tiff', '.png']:  # Raster formats
                with Image.open(temp_input_path) as img:
                    img.verify()  # Verify image to check if it's valid
                    img = Image.open(temp_input_path)  # Reopen after verify
                    img.save(output_path, format="PNG")  # Save as PNG
            elif ext == '.svg':  # SVG format needs conversion
                cairosvg.svg2png(url=temp_input_path, write_to=output_path)
            else:
                raise ValueError(f"Unsupported file format: {ext}")
        except Exception as e:
            raise ValueError(f"Error processing image: {e}")

        # Clean up the temporary input file (no longer needed after conversion)
        os.remove(temp_input_path)
        
        return output_path  # Return the path to the converted PNG file

    except Exception as e:
        raise ValueError(f"Error processing image: {e}")


# Function to process multiple files concurrently
def process_files_concurrently(files):
    # Process files in parallel and return converted paths
    with ThreadPoolExecutor() as executor:
        results = list(executor.map(convert_image_to_png, files))
    return results


# Function to create PowerPoint slide with selected images and title text
def create_ppt_from_selected_images(uploaded_files, num_slides, images_per_slide, titles):
    prs = Presentation()

    # Slide margin in inches (1/4 inch margin)
    slide_margin = Inches(0.25)

    # Title space at the top of the slide (1/2 inch)
    title_space = Inches(0.5)

    # Loop over the number of slides
    for slide_idx in range(num_slides):
        slide_layout = prs.slide_layouts[5]  # Blank layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Get images for the current slide
        selected_images = images_per_slide[slide_idx]
        slide_title = titles[slide_idx]

        # Slide dimensions (inches)
        slide_width = prs.slide_width
        slide_height = prs.slide_height

        # Calculate the available space after accounting for margins and title space
        available_width = slide_width - 2 * slide_margin
        available_height = slide_height - title_space - 2 * slide_margin

        # Calculate positions to place images on the slide
        max_images_per_row = 2  # Two images per row
        image_spacing = Inches(0.2)  # Space between images
        images_in_current_slide = len(selected_images)

        # Calculate the width and height of each image based on available space
        if images_in_current_slide == 1:
            image_width = available_width
            image_height = available_height
        else:
            max_images_per_row = min(max_images_per_row, images_in_current_slide)
            image_width = (available_width - (max_images_per_row - 1) * image_spacing) / max_images_per_row
            num_rows = (images_in_current_slide + max_images_per_row - 1) // max_images_per_row
            image_height = (available_height - (num_rows - 1) * image_spacing) / num_rows

        # Add the title text at the top
        title_shape = slide.shapes.title
        title_shape.text = slide_title
        title_shape.left = slide_margin
        title_shape.top = slide_margin
        title_shape.width = slide_width - 2 * slide_margin  # Full width minus margins
        title_shape.height = title_space  # Fixed height for the title area

        # Loop through the selected images for the current slide
        x_offset = slide_margin
        y_offset = slide_margin + title_space  # Start placing images below the title

        for i, img_file in enumerate(selected_images):
            image = Image.open(img_file)
            img_width, img_height = image.size

            # Scale image while preserving aspect ratio
            aspect_ratio = img_width / img_height
            new_width = image_width
            new_height = image_width / aspect_ratio

            # If the new height exceeds the available height, adjust the width and height
            if new_height > image_height:
                new_height = image_height
                new_width = image_height * aspect_ratio

            # Position the images in a grid-like fashion (2 images per row)
            left = x_offset
            top = y_offset

            # Add the image to the slide
            with io.BytesIO() as image_stream:
                image.save(image_stream, format="PNG")
                image_stream.seek(0)
                slide.shapes.add_picture(image_stream, left, top, width=new_width, height=new_height)

            # Update x_offset for the next image (to arrange in two columns)
            x_offset += new_width + image_spacing

            # If we have placed two images, reset x_offset and move to the next row
            if (i + 1) % max_images_per_row == 0:
                x_offset = slide_margin
                y_offset += new_height + image_spacing

    return prs


# Streamlit UI
st.title("Image to PowerPoint Converter")

st.write(
    "Upload your image files (JPG, PNG, SVG, TIFF), and I will convert them into PowerPoint slides. "
    "For each slide, you can select up to 4 images to place on it, and you can set a title for each slide."
)

# File uploader
uploaded_files = st.file_uploader("Choose image files", type=["jpg", "jpeg", "png", "svg", "tiff"], accept_multiple_files=True)

# Store the converted files in session state
if 'converted_files' not in st.session_state:
    st.session_state.converted_files = []

if uploaded_files:
    # Convert the uploaded files to PNG format if not already converted
    if not st.session_state.converted_files:
        st.write("Converting images to PNG...")
        converted_files = process_files_concurrently(uploaded_files)
        st.session_state.converted_files = converted_files  # Save the converted files to session state

    # Show number of slides selector
    num_slides = st.number_input("Select number of slides", min_value=1, max_value=len(st.session_state.converted_files), value=1)

    # Prepare a list to hold selected images per slide and titles
    images_per_slide = []
    slide_titles = []

    # Show multi-select options for each slide and title input
    for slide_idx in range(num_slides):
        st.subheader(f"Slide {slide_idx + 1}")
        
        # Title input for each slide
        slide_title = st.text_input(f"Enter title for Slide {slide_idx + 1}", value=f"Slide {slide_idx + 1}")
        slide_titles.append(slide_title)
        
        # Multi-select for images
        selected_images = st.multiselect(
            f"Select up to 4 images for Slide {slide_idx + 1}",
            options=st.session_state.converted_files,
            max_selections=4
        )
        images_per_slide.append(selected_images)

    # Generate the PowerPoint file when user is ready
    if st.button("Generate PowerPoint"):
        if images_per_slide:
            prs = create_ppt_from_selected_images(st.session_state.converted_files, num_slides, images_per_slide, slide_titles)
            
            # Save the PowerPoint file to a BytesIO stream
            pptx_file = io.BytesIO()
            prs.save(pptx_file)
            pptx_file.seek(0)

            # Button to download the generated PowerPoint file
            st.download_button(
                label="Download PowerPoint",
                data=pptx_file,
                file_name="images_presentation.pptx",
                mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
            )

